# ??
# application.properties ??? ????? ?? ??

# ?????? ????( ??? ?? : ???? ?? 8080 )
# JSP(????) ?? ?? ??? ?? ??
server.port = 8080

# Spring data ???? DB ???  ??
# 1. mysql ????
spring.datasource.driverClassName=com.mysql.cj.jdbc.Driver
# 2. DB URL
spring.datasource.url=jdbc:mysql://localhost:3306/seuleuleug
# 3. DB ?? ID
spring.datasource.username=root
# 4. DB ?? PASSWORD *????? ??
spring.datasource.password=1234

# JPA ?? ??
# 5. JPA ??? ???? create [ DROP -> CREATE  ]
spring.jpa.hibernate.ddl-auto = create
# 6. JPA ??? ???? update [ ???? SQL ???? ?? CREATE  ]
# spring.jpa.hibernate.ddl-auto = update
# 7. JPA  ?  ???? ??? SQL? console ????? ???
spring.jpa.properties.hibernate.show_sql = true
spring.jpa.properties.hibernate.format_sql = true

# ?? ??
# 1. ??? ?? ?? ?? [ info ?? ??? ?? ]
logging.level.root = info
# 2. ??? ?? ?? [ ?? / ???.log ]
logging.file.name=C:/java/spring.log

# Oauth2 ??? ???

# 1. ?? ???? ????? ??? oauth ????? ??
# 1. ??? ?? ????? id ??
# spring.security.oauth2.client.registration.google.client-id =??? ????? id
spring.security.oauth2.client.registration.google.client-id=43874748185-o2b4cq9752bs27i937trtcgltcgv88dv.apps.googleusercontent.com
# 2. ??? ?? ????? pw ??
spring.security.oauth2.client.registration.google.client-secret=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
# 3. ???? ??? ????[??? ?????] : ??? ????? ??? ??/??? ??
spring.security.oauth2.client.registration.google.scope = email,profile

# 2. ??? ????? ?? ??? ??? ??? ??
# spring.security.oauth2.client.registration.kakao.client-id = REST API ?
spring.security.oauth2.client.registration.kakao.client-id =f804d4e2ed19f438ff641d9e90bf1801
# spring.security.oauth2.client.registration.kakao.client-secret = ?? ?
spring.security.oauth2.client.registration.kakao.client-secret =DeFA3opP2svvTODvWx0Mj59cB5q40BaL
# 3. ???? ??? ????[??? ?????] : ??? ????? ??? ??/??? ??
spring.security.oauth2.client.registration.kakao.client-scope =profile_nickname,account_email

# ?? ??1
# 1. ????? ?? ???
spring.security.oauth2.client.registration.kakao.client-name =kakao
# 2. ?? ?? ??? HTTP ??? ??
spring.security.oauth2.client.registration.kakao.client-authentication-method =post
# 3. ??? redirect-uri
spring.security.oauth2.client.registration.kakao.redirect-uri ={baseUrl}/{action}/oauth2/code/{registrationId}
# 4. ?? ??? JSON ?? [ ?? ]
spring.security.oauth2.client.registration.kakao.authorization-grant-type=authorization_code

# ?? ??2
# 1. ???? ??? ???? uri
spring.security.oauth2.client.provider.kakao.authorization-uri=https://kauth.kakao.com/oauth/authorize
# 2. ?? ?? ??? ???? uri
spring.security.oauth2.client.provider.kakao.token-uri =https://kauth.kakao.com/oauth/token
# 3. ????? ??? ???? [ ????,???? ??] ??? ???? uri
spring.security.oauth2.client.provider.kakao.user-info-uri =https://kapi.kakao.com/v2/user/me
# 4. ??? ???? ?? ? JSON ??[?] = ?????? ??? ??? ???? ? ??
spring.security.oauth2.client.provider.kakao.user-name-attribute=kakao_account



# ???
spring.security.oauth2.client.registration.naver.client-id =rI6YoSJ2xdBsLkQhtcgp
spring.security.oauth2.client.registration.naver.client-secret =HWNkDfkJD1
spring.security.oauth2.client.registration.naver.client-scope =nickname,email

spring.security.oauth2.client.registration.naver.client-name =naver
#spring.security.oauth2.client.registration.naver.client-authentication-method =post
spring.security.oauth2.client.registration.naver.redirect-uri ={baseUrl}/{action}/oauth2/code/{registrationId}
spring.security.oauth2.client.registration.naver.authorization-grant-type=authorization_code

spring.security.oauth2.client.provider.naver.authorization-uri=https://nid.naver.com/oauth2.0/authorize
spring.security.oauth2.client.provider.naver.token-uri =https://nid.naver.com/oauth2.0/token
spring.security.oauth2.client.provider.naver.user-info-uri =https://openapi.naver.com/v1/nid/me
spring.security.oauth2.client.provider.naver.user-name-attribute=response

spring.mvc.pathmatch.matching-strategy = ant_path_matcher























